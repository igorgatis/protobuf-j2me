// Generated by the protocol buffer compiler.  DO NOT EDIT!

public  final class PrimitiveTypesOnly extends
    com.google.protobuf.Message {
  private int set_mask_0_;
  public PrimitiveTypesOnly() {
    super("PrimitiveTypesOnly");
    initFields();
  }
  private PrimitiveTypesOnly(boolean noInit) { super(true); }
  
  private static final PrimitiveTypesOnly defaultInstance;
  public static PrimitiveTypesOnly getDefaultInstance() {
    return defaultInstance;
  }
  
  public PrimitiveTypesOnly getDefaultInstanceForType() {
    return defaultInstance;
  }
  
  // required bool req_bool = 1;
  private boolean reqBool_ = false;
  public boolean getReqBool() { return reqBool_; }
  public boolean hasReqBool() { return (set_mask_0_ & 1) != 0; }
  public void clearReqBool() {
    assertNotReadOnly();
    set_mask_0_ &= ~1;
    reqBool_ = false;
  }
  public void setReqBool(boolean value) {
    assertNotReadOnly();
    set_mask_0_ |= 1;
    reqBool_ = value;
  }
  
  // required int32 req_int = 2;
  private int reqInt_ = 0;
  public int getReqInt() { return reqInt_; }
  public boolean hasReqInt() { return (set_mask_0_ & 2) != 0; }
  public void clearReqInt() {
    assertNotReadOnly();
    set_mask_0_ &= ~2;
    reqInt_ = 0;
  }
  public void setReqInt(int value) {
    assertNotReadOnly();
    set_mask_0_ |= 2;
    reqInt_ = value;
  }
  
  // required string req_str = 3;
  private java.lang.String reqStr_ = "";
  public java.lang.String getReqStr() { return reqStr_; }
  public boolean hasReqStr() { return (set_mask_0_ & 4) != 0; }
  public void clearReqStr() {
    assertNotReadOnly();
    set_mask_0_ &= ~4;
    reqStr_ = "";
  }
  public void setReqStr(java.lang.String value) {
    assertNotReadOnly();
    set_mask_0_ |= 4;
    reqStr_ = value;
  }
  
  private void initFields() {
  }
  public final boolean isInitialized() {
    if (!hasReqBool()) return false;
    if (!hasReqInt()) return false;
    if (!hasReqStr()) return false;
    return true;
  }
  
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (!(obj instanceof PrimitiveTypesOnly)) return false;
    PrimitiveTypesOnly msg = (PrimitiveTypesOnly)obj;
    if (reqBool_ != msg.reqBool_) {
      return false;
    }
    if (reqInt_ != msg.reqInt_) {
      return false;
    }
    if (!reqStr_.equals(msg.reqStr_)) {
      return false;
    }
    return true;
  }
  
  public int hashCode() {
    int hash = 41 * getClass().getName().hashCode();
    if (hasReqBool()) hash += 33 * (reqBool_ ? 1 : 0);
    if (hasReqInt()) hash += 33 * reqInt_;
    if (hasReqStr()) hash += 31 * reqStr_.hashCode();
    return hash;
  }
  
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (hasReqBool()) {
      output.writeBool(1, getReqBool());
    }
    if (hasReqInt()) {
      output.writeInt32(2, getReqInt());
    }
    if (hasReqStr()) {
      output.writeString(3, getReqStr());
    }
  }
  
  public int getSerializedSize() {
    int size = 0;
    if (hasReqBool()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, getReqBool());
    }
    if (hasReqInt()) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, getReqInt());
    }
    if (hasReqStr()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(3, getReqStr());
    }
    return size;
  }
  
  public static PrimitiveTypesOnly parseFrom(
      java.io.InputStream input)
      throws java.io.IOException {
    com.google.protobuf.CodedInputStream codedInput =
        com.google.protobuf.CodedInputStream.newInstance(input);
    return parseFrom(codedInput);
  }
  
  public static PrimitiveTypesOnly parseFrom(
      com.google.protobuf.CodedInputStream codedInput)
      throws java.io.IOException {
    PrimitiveTypesOnly proto = new PrimitiveTypesOnly();
    proto.mergeFrom(codedInput);
    return proto;
  }
  
  public com.google.protobuf.Message newInstance() {
    return new PrimitiveTypesOnly();
  }
  
  public void mergeFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    assertNotReadOnly();
    while (true) {
      int tag = input.readTag();
      switch (tag) {
        case 0:
          return;
        default: {
          if (!parseUnknownField(input, tag)) {
            return;
          }
          break;
        }
        case 8: {
          setReqBool(input.readBool());
          break;
        }
        case 16: {
          setReqInt(input.readInt32());
          break;
        }
        case 26: {
          setReqStr(input.readString());
          break;
        }
      }
    }
  }
  
  
  static {
    defaultInstance = new PrimitiveTypesOnly(true);
    HelloWorld.internalForceInit();
    defaultInstance.initFields();
  }
  
  // @@protoc_insertion_point(class_scope:PrimitiveTypesOnly)
}

