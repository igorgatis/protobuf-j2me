// Generated by the protocol buffer compiler.  DO NOT EDIT!

public  final class HelloWorldProto extends
    com.google.protobuf.Message {
  private int set_mask_0_;
  public HelloWorldProto() {
    super("HelloWorldProto");
    initFields();
  }
  private HelloWorldProto(boolean noInit) { super(true); }
  
  private static final HelloWorldProto defaultInstance;
  public static HelloWorldProto getDefaultInstance() {
    return defaultInstance;
  }
  
  public HelloWorldProto getDefaultInstanceForType() {
    return defaultInstance;
  }
  
  // required int32 req_int = 1;
  private int reqInt_ = 0;
  public int getReqInt() { return reqInt_; }
  public boolean hasReqInt() { return (set_mask_0_ & 1) != 0; }
  public void clearReqInt() {
    assertNotReadOnly();
    set_mask_0_ &= ~1;
    reqInt_ = 0;
  }
  public void setReqInt(int value) {
    assertNotReadOnly();
    set_mask_0_ |= 1;
    reqInt_ = value;
  }
  
  // optional int32 opt_int = 2;
  private int optInt_ = 0;
  public int getOptInt() { return optInt_; }
  public boolean hasOptInt() { return (set_mask_0_ & 2) != 0; }
  public void clearOptInt() {
    assertNotReadOnly();
    set_mask_0_ &= ~2;
    optInt_ = 0;
  }
  public void setOptInt(int value) {
    assertNotReadOnly();
    set_mask_0_ |= 2;
    optInt_ = value;
  }
  
  // repeated int32 rep_int = 3;
  private int[] repInt_ = new int[0];
  private int repIntCount_;
  public int getRepIntCount() { return repIntCount_; }
  public int getRepInt(int index) {
    return repInt_[index];
  }
  public void reserveRepInt(int size) {
    if (size >= repInt_.length) {
      int[] copy = new int[size];
      System.arraycopy(repInt_, 0, copy, 0, repIntCount_);
      repInt_ = copy;
    }
  }
  public void setRepInt(int index, int value) {
    assertNotReadOnly();
    repInt_[index] = value;
  }
  public void addRepInt(int value) {
    assertNotReadOnly();
    reserveRepInt(repIntCount_ + 1);
    repInt_[repIntCount_++] = value;
  }
  public void swapRepInt(int index1, int index2) {
    assertNotReadOnly();
    int swp = repInt_[index1];
    repInt_[index1] = repInt_[index2];
    repInt_[index2] = swp;
  }
  public void removeLastRepInt() {
    assertNotReadOnly();
    if (repIntCount_ > 0) {
      repInt_[repIntCount_--] = 0;
    }
  }
  public void clearRepInt() {
    assertNotReadOnly();
    while (repIntCount_ > 0) {
      repInt_[repIntCount_--] = 0;
    }
  }
  
  // required string req_str = 4;
  private java.lang.String reqStr_ = "";
  public java.lang.String getReqStr() { return reqStr_; }
  public boolean hasReqStr() { return (set_mask_0_ & 8) != 0; }
  public void clearReqStr() {
    assertNotReadOnly();
    set_mask_0_ &= ~8;
    reqStr_ = "";
  }
  public void setReqStr(java.lang.String value) {
    assertNotReadOnly();
    set_mask_0_ |= 8;
    reqStr_ = value;
  }
  
  // optional string opt_str = 5;
  private java.lang.String optStr_ = "";
  public java.lang.String getOptStr() { return optStr_; }
  public boolean hasOptStr() { return (set_mask_0_ & 16) != 0; }
  public void clearOptStr() {
    assertNotReadOnly();
    set_mask_0_ &= ~16;
    optStr_ = "";
  }
  public void setOptStr(java.lang.String value) {
    assertNotReadOnly();
    set_mask_0_ |= 16;
    optStr_ = value;
  }
  
  // repeated string rep_str = 6;
  private java.lang.String[] repStr_ = new java.lang.String[0];
  private int repStrCount_;
  public int getRepStrCount() { return repStrCount_; }
  public java.lang.String getRepStr(int index) {
    return repStr_[index];
  }
  public void reserveRepStr(int size) {
    if (size >= repStr_.length) {
      java.lang.String[] copy = new java.lang.String[size];
      System.arraycopy(repStr_, 0, copy, 0, repStrCount_);
      repStr_ = copy;
    }
  }
  public void setRepStr(int index, java.lang.String value) {
    assertNotReadOnly();
    repStr_[index] = value;
  }
  public void addRepStr(java.lang.String value) {
    assertNotReadOnly();
    reserveRepStr(repStrCount_ + 1);
    repStr_[repStrCount_++] = value;
  }
  public void swapRepStr(int index1, int index2) {
    assertNotReadOnly();
    java.lang.String swp = repStr_[index1];
    repStr_[index1] = repStr_[index2];
    repStr_[index2] = swp;
  }
  public void removeLastRepStr() {
    assertNotReadOnly();
    if (repStrCount_ > 0) {
      repStr_[repStrCount_--] = "";
    }
  }
  public void clearRepStr() {
    assertNotReadOnly();
    while (repStrCount_ > 0) {
      repStr_[repStrCount_--] = "";
    }
  }
  
  // required bytes req_bts = 7;
  private com.google.protobuf.ByteString reqBts_ = com.google.protobuf.ByteString.EMPTY;
  public com.google.protobuf.ByteString getReqBts() { return reqBts_; }
  public boolean hasReqBts() { return (set_mask_0_ & 64) != 0; }
  public void clearReqBts() {
    assertNotReadOnly();
    set_mask_0_ &= ~64;
    reqBts_ = com.google.protobuf.ByteString.EMPTY;
  }
  public void setReqBts(com.google.protobuf.ByteString value) {
    assertNotReadOnly();
    set_mask_0_ |= 64;
    reqBts_ = value;
  }
  
  // optional bytes opt_bts = 8;
  private com.google.protobuf.ByteString optBts_ = com.google.protobuf.ByteString.EMPTY;
  public com.google.protobuf.ByteString getOptBts() { return optBts_; }
  public boolean hasOptBts() { return (set_mask_0_ & 128) != 0; }
  public void clearOptBts() {
    assertNotReadOnly();
    set_mask_0_ &= ~128;
    optBts_ = com.google.protobuf.ByteString.EMPTY;
  }
  public void setOptBts(com.google.protobuf.ByteString value) {
    assertNotReadOnly();
    set_mask_0_ |= 128;
    optBts_ = value;
  }
  
  // repeated bytes rep_bts = 9;
  private com.google.protobuf.ByteString[] repBts_ = new com.google.protobuf.ByteString[0];
  private int repBtsCount_;
  public int getRepBtsCount() { return repBtsCount_; }
  public com.google.protobuf.ByteString getRepBts(int index) {
    return repBts_[index];
  }
  public void reserveRepBts(int size) {
    if (size >= repBts_.length) {
      com.google.protobuf.ByteString[] copy = new com.google.protobuf.ByteString[size];
      System.arraycopy(repBts_, 0, copy, 0, repBtsCount_);
      repBts_ = copy;
    }
  }
  public void setRepBts(int index, com.google.protobuf.ByteString value) {
    assertNotReadOnly();
    repBts_[index] = value;
  }
  public void addRepBts(com.google.protobuf.ByteString value) {
    assertNotReadOnly();
    reserveRepBts(repBtsCount_ + 1);
    repBts_[repBtsCount_++] = value;
  }
  public void swapRepBts(int index1, int index2) {
    assertNotReadOnly();
    com.google.protobuf.ByteString swp = repBts_[index1];
    repBts_[index1] = repBts_[index2];
    repBts_[index2] = swp;
  }
  public void removeLastRepBts() {
    assertNotReadOnly();
    if (repBtsCount_ > 0) {
      repBts_[repBtsCount_--] = com.google.protobuf.ByteString.EMPTY;
    }
  }
  public void clearRepBts() {
    assertNotReadOnly();
    while (repBtsCount_ > 0) {
      repBts_[repBtsCount_--] = com.google.protobuf.ByteString.EMPTY;
    }
  }
  
  // required .Flags req_flg = 10;
  private Flags reqFlg_;
  public Flags getReqFlg() { return reqFlg_; }
  public boolean hasReqFlg() { return (set_mask_0_ & 512) != 0; }
  public void clearReqFlg() {
    assertNotReadOnly();
    set_mask_0_ &= ~512;
    reqFlg_ = Flags.VAL0;
  }
  public void setReqFlg(Flags value) {
    assertNotReadOnly();
    if (value == null) {
      throw new NullPointerException();
    }
    set_mask_0_ |= 512;
    reqFlg_ = value;
  }
  
  // optional .Flags opt_flg = 11;
  private Flags optFlg_;
  public Flags getOptFlg() { return optFlg_; }
  public boolean hasOptFlg() { return (set_mask_0_ & 1024) != 0; }
  public void clearOptFlg() {
    assertNotReadOnly();
    set_mask_0_ &= ~1024;
    optFlg_ = Flags.VAL0;
  }
  public void setOptFlg(Flags value) {
    assertNotReadOnly();
    if (value == null) {
      throw new NullPointerException();
    }
    set_mask_0_ |= 1024;
    optFlg_ = value;
  }
  
  // repeated .Flags rep_flg = 12;
  private Flags[] repFlg_ = new Flags[0];
  private int repFlgCount_;
  public int getRepFlgCount() { return repFlgCount_; }
  public Flags getRepFlg(int index) {
    return repFlg_[index];
  }
  public void reserveRepFlg(int size) {
    if (size >= repFlg_.length) {
      Flags[] copy = new Flags[size];
      System.arraycopy(repFlg_, 0, copy, 0, repFlgCount_);
      repFlg_ = copy;
    }
  }
  public void setRepFlg(int index, Flags value) {
    assertNotReadOnly();
    repFlg_[index] = value;
  }
  public void addRepFlg(Flags value) {
    assertNotReadOnly();
    reserveRepFlg(repFlgCount_ + 1);
    repFlg_[repFlgCount_++] = value;
  }
  public void swapRepFlg(int index1, int index2) {
    assertNotReadOnly();
    Flags swp = repFlg_[index1];
    repFlg_[index1] = repFlg_[index2];
    repFlg_[index2] = swp;
  }
  public void removeLastRepFlg() {
    assertNotReadOnly();
    if (repFlgCount_ > 0) {
      repFlg_[repFlgCount_--] = Flags.VAL0;
    }
  }
  public void clearRepFlg() {
    assertNotReadOnly();
    while (repFlgCount_ > 0) {
      repFlg_[repFlgCount_--] = Flags.VAL0;
    }
  }
  
  // required .Foo req_foo = 13;
  private Foo reqFoo_;
  public Foo getReqFoo() { return reqFoo_; }
  public boolean hasReqFoo() { return (set_mask_0_ & 4096) != 0; }
  public void clearReqFoo() {
    assertNotReadOnly();
    set_mask_0_ &= ~4096;
    reqFoo_ = Foo.getDefaultInstance();
  }
  public void setReqFoo(Foo value) {
    assertNotReadOnly();
    if (value == null) {
      throw new NullPointerException();
    }
    set_mask_0_ |= 4096;
    reqFoo_ = value;
  }
  
  // optional .Foo opt_foo = 14;
  private Foo optFoo_;
  public Foo getOptFoo() { return optFoo_; }
  public boolean hasOptFoo() { return (set_mask_0_ & 8192) != 0; }
  public void clearOptFoo() {
    assertNotReadOnly();
    set_mask_0_ &= ~8192;
    optFoo_ = Foo.getDefaultInstance();
  }
  public void setOptFoo(Foo value) {
    assertNotReadOnly();
    if (value == null) {
      throw new NullPointerException();
    }
    set_mask_0_ |= 8192;
    optFoo_ = value;
  }
  
  // repeated .Foo rep_foo = 15;
  private java.util.Vector repFoo_ = new java.util.Vector();
  public java.util.Enumeration getRepFooEnum() {
    return repFoo_.elements();
  }
  public int getRepFooCount() { return repFoo_.size(); }
  public Foo getRepFoo(int index) {
    return (Foo) repFoo_.elementAt(index);
  }
  public void setRepFoo(int index, Foo value) {
    assertNotReadOnly();
    if (value == null) {
      throw new NullPointerException();
    }
    repFoo_.setElementAt(value, index);
  }
  public void addRepFoo(Foo value) {
    assertNotReadOnly();
    if (value == null) {
      throw new NullPointerException();
    }
    repFoo_.addElement(value);
  }
  public void swapRepFoo(int index1, int index2) {
    assertNotReadOnly();
    Object swp = repFoo_.elementAt(index1);
    repFoo_.setElementAt(repFoo_.elementAt(index2), index1);
    repFoo_.setElementAt(swp, index2);
  }
  public void removeLastRepFoo() {
    assertNotReadOnly();
    if (repFoo_.size() > 0) {
      repFoo_.removeElementAt(repFoo_.size() - 1);
    }
  }
  public void clearRepFoo() {
    assertNotReadOnly();
    repFoo_.removeAllElements();
  }
  
  // required bool req_bool = 16;
  private boolean reqBool_ = false;
  public boolean getReqBool() { return reqBool_; }
  public boolean hasReqBool() { return (set_mask_0_ & 32768) != 0; }
  public void clearReqBool() {
    assertNotReadOnly();
    set_mask_0_ &= ~32768;
    reqBool_ = false;
  }
  public void setReqBool(boolean value) {
    assertNotReadOnly();
    set_mask_0_ |= 32768;
    reqBool_ = value;
  }
  
  // optional bool opt_bool = 17;
  private boolean optBool_ = false;
  public boolean getOptBool() { return optBool_; }
  public boolean hasOptBool() { return (set_mask_0_ & 65536) != 0; }
  public void clearOptBool() {
    assertNotReadOnly();
    set_mask_0_ &= ~65536;
    optBool_ = false;
  }
  public void setOptBool(boolean value) {
    assertNotReadOnly();
    set_mask_0_ |= 65536;
    optBool_ = value;
  }
  
  // repeated bool rep_bool = 18;
  private boolean[] repBool_ = new boolean[0];
  private int repBoolCount_;
  public int getRepBoolCount() { return repBoolCount_; }
  public boolean getRepBool(int index) {
    return repBool_[index];
  }
  public void reserveRepBool(int size) {
    if (size >= repBool_.length) {
      boolean[] copy = new boolean[size];
      System.arraycopy(repBool_, 0, copy, 0, repBoolCount_);
      repBool_ = copy;
    }
  }
  public void setRepBool(int index, boolean value) {
    assertNotReadOnly();
    repBool_[index] = value;
  }
  public void addRepBool(boolean value) {
    assertNotReadOnly();
    reserveRepBool(repBoolCount_ + 1);
    repBool_[repBoolCount_++] = value;
  }
  public void swapRepBool(int index1, int index2) {
    assertNotReadOnly();
    boolean swp = repBool_[index1];
    repBool_[index1] = repBool_[index2];
    repBool_[index2] = swp;
  }
  public void removeLastRepBool() {
    assertNotReadOnly();
    if (repBoolCount_ > 0) {
      repBool_[repBoolCount_--] = false;
    }
  }
  public void clearRepBool() {
    assertNotReadOnly();
    while (repBoolCount_ > 0) {
      repBool_[repBoolCount_--] = false;
    }
  }
  
  // required int32 req_int_def = 19 [default = 1];
  private int reqIntDef_ = 1;
  public int getReqIntDef() { return reqIntDef_; }
  public boolean hasReqIntDef() { return (set_mask_0_ & 262144) != 0; }
  public void clearReqIntDef() {
    assertNotReadOnly();
    set_mask_0_ &= ~262144;
    reqIntDef_ = 1;
  }
  public void setReqIntDef(int value) {
    assertNotReadOnly();
    set_mask_0_ |= 262144;
    reqIntDef_ = value;
  }
  
  // optional int32 opt_int_def = 20 [default = 2];
  private int optIntDef_ = 2;
  public int getOptIntDef() { return optIntDef_; }
  public boolean hasOptIntDef() { return (set_mask_0_ & 524288) != 0; }
  public void clearOptIntDef() {
    assertNotReadOnly();
    set_mask_0_ &= ~524288;
    optIntDef_ = 2;
  }
  public void setOptIntDef(int value) {
    assertNotReadOnly();
    set_mask_0_ |= 524288;
    optIntDef_ = value;
  }
  
  // required .Flags req_flg_def = 21 [default = VAL0];
  private Flags reqFlgDef_;
  public Flags getReqFlgDef() { return reqFlgDef_; }
  public boolean hasReqFlgDef() { return (set_mask_0_ & 1048576) != 0; }
  public void clearReqFlgDef() {
    assertNotReadOnly();
    set_mask_0_ &= ~1048576;
    reqFlgDef_ = Flags.VAL0;
  }
  public void setReqFlgDef(Flags value) {
    assertNotReadOnly();
    if (value == null) {
      throw new NullPointerException();
    }
    set_mask_0_ |= 1048576;
    reqFlgDef_ = value;
  }
  
  // optional .Flags opt_flg_def = 22 [default = VAL1];
  private Flags optFlgDef_;
  public Flags getOptFlgDef() { return optFlgDef_; }
  public boolean hasOptFlgDef() { return (set_mask_0_ & 2097152) != 0; }
  public void clearOptFlgDef() {
    assertNotReadOnly();
    set_mask_0_ &= ~2097152;
    optFlgDef_ = Flags.VAL1;
  }
  public void setOptFlgDef(Flags value) {
    assertNotReadOnly();
    if (value == null) {
      throw new NullPointerException();
    }
    set_mask_0_ |= 2097152;
    optFlgDef_ = value;
  }
  
  // required string req_str_def = 23 [default = "1"];
  private java.lang.String reqStrDef_ = "1";
  public java.lang.String getReqStrDef() { return reqStrDef_; }
  public boolean hasReqStrDef() { return (set_mask_0_ & 4194304) != 0; }
  public void clearReqStrDef() {
    assertNotReadOnly();
    set_mask_0_ &= ~4194304;
    reqStrDef_ = "1";
  }
  public void setReqStrDef(java.lang.String value) {
    assertNotReadOnly();
    set_mask_0_ |= 4194304;
    reqStrDef_ = value;
  }
  
  // optional string opt_str_def = 24 [default = "2"];
  private java.lang.String optStrDef_ = "2";
  public java.lang.String getOptStrDef() { return optStrDef_; }
  public boolean hasOptStrDef() { return (set_mask_0_ & 8388608) != 0; }
  public void clearOptStrDef() {
    assertNotReadOnly();
    set_mask_0_ &= ~8388608;
    optStrDef_ = "2";
  }
  public void setOptStrDef(java.lang.String value) {
    assertNotReadOnly();
    set_mask_0_ |= 8388608;
    optStrDef_ = value;
  }
  
  // required bool req_bool_def = 25 [default = true];
  private boolean reqBoolDef_ = true;
  public boolean getReqBoolDef() { return reqBoolDef_; }
  public boolean hasReqBoolDef() { return (set_mask_0_ & 16777216) != 0; }
  public void clearReqBoolDef() {
    assertNotReadOnly();
    set_mask_0_ &= ~16777216;
    reqBoolDef_ = true;
  }
  public void setReqBoolDef(boolean value) {
    assertNotReadOnly();
    set_mask_0_ |= 16777216;
    reqBoolDef_ = value;
  }
  
  // optional bool opt_bool_def = 26 [default = false];
  private boolean optBoolDef_ = false;
  public boolean getOptBoolDef() { return optBoolDef_; }
  public boolean hasOptBoolDef() { return (set_mask_0_ & 33554432) != 0; }
  public void clearOptBoolDef() {
    assertNotReadOnly();
    set_mask_0_ &= ~33554432;
    optBoolDef_ = false;
  }
  public void setOptBoolDef(boolean value) {
    assertNotReadOnly();
    set_mask_0_ |= 33554432;
    optBoolDef_ = value;
  }
  
  // repeated int32 rep_int_pck = 27 [packed = true];
  private int[] repIntPck_ = new int[0];
  private int repIntPckCount_;
  public int getRepIntPckCount() { return repIntPckCount_; }
  public int getRepIntPck(int index) {
    return repIntPck_[index];
  }
  public void reserveRepIntPck(int size) {
    if (size >= repIntPck_.length) {
      int[] copy = new int[size];
      System.arraycopy(repIntPck_, 0, copy, 0, repIntPckCount_);
      repIntPck_ = copy;
    }
  }
  public void setRepIntPck(int index, int value) {
    assertNotReadOnly();
    repIntPck_[index] = value;
  }
  public void addRepIntPck(int value) {
    assertNotReadOnly();
    reserveRepIntPck(repIntPckCount_ + 1);
    repIntPck_[repIntPckCount_++] = value;
  }
  public void swapRepIntPck(int index1, int index2) {
    assertNotReadOnly();
    int swp = repIntPck_[index1];
    repIntPck_[index1] = repIntPck_[index2];
    repIntPck_[index2] = swp;
  }
  public void removeLastRepIntPck() {
    assertNotReadOnly();
    if (repIntPckCount_ > 0) {
      repIntPck_[repIntPckCount_--] = 0;
    }
  }
  public void clearRepIntPck() {
    assertNotReadOnly();
    while (repIntPckCount_ > 0) {
      repIntPck_[repIntPckCount_--] = 0;
    }
  }
  private int repIntPckMemoizedSerializedSize = -1;
  
  // repeated bool rep_bool_pck = 28 [packed = true];
  private boolean[] repBoolPck_ = new boolean[0];
  private int repBoolPckCount_;
  public int getRepBoolPckCount() { return repBoolPckCount_; }
  public boolean getRepBoolPck(int index) {
    return repBoolPck_[index];
  }
  public void reserveRepBoolPck(int size) {
    if (size >= repBoolPck_.length) {
      boolean[] copy = new boolean[size];
      System.arraycopy(repBoolPck_, 0, copy, 0, repBoolPckCount_);
      repBoolPck_ = copy;
    }
  }
  public void setRepBoolPck(int index, boolean value) {
    assertNotReadOnly();
    repBoolPck_[index] = value;
  }
  public void addRepBoolPck(boolean value) {
    assertNotReadOnly();
    reserveRepBoolPck(repBoolPckCount_ + 1);
    repBoolPck_[repBoolPckCount_++] = value;
  }
  public void swapRepBoolPck(int index1, int index2) {
    assertNotReadOnly();
    boolean swp = repBoolPck_[index1];
    repBoolPck_[index1] = repBoolPck_[index2];
    repBoolPck_[index2] = swp;
  }
  public void removeLastRepBoolPck() {
    assertNotReadOnly();
    if (repBoolPckCount_ > 0) {
      repBoolPck_[repBoolPckCount_--] = false;
    }
  }
  public void clearRepBoolPck() {
    assertNotReadOnly();
    while (repBoolPckCount_ > 0) {
      repBoolPck_[repBoolPckCount_--] = false;
    }
  }
  private int repBoolPckMemoizedSerializedSize = -1;
  
  // repeated .Flags rep_flg_pck = 29 [packed = true];
  private Flags[] repFlgPck_ = new Flags[0];
  private int repFlgPckCount_;
  public int getRepFlgPckCount() { return repFlgPckCount_; }
  public Flags getRepFlgPck(int index) {
    return repFlgPck_[index];
  }
  public void reserveRepFlgPck(int size) {
    if (size >= repFlgPck_.length) {
      Flags[] copy = new Flags[size];
      System.arraycopy(repFlgPck_, 0, copy, 0, repFlgPckCount_);
      repFlgPck_ = copy;
    }
  }
  public void setRepFlgPck(int index, Flags value) {
    assertNotReadOnly();
    repFlgPck_[index] = value;
  }
  public void addRepFlgPck(Flags value) {
    assertNotReadOnly();
    reserveRepFlgPck(repFlgPckCount_ + 1);
    repFlgPck_[repFlgPckCount_++] = value;
  }
  public void swapRepFlgPck(int index1, int index2) {
    assertNotReadOnly();
    Flags swp = repFlgPck_[index1];
    repFlgPck_[index1] = repFlgPck_[index2];
    repFlgPck_[index2] = swp;
  }
  public void removeLastRepFlgPck() {
    assertNotReadOnly();
    if (repFlgPckCount_ > 0) {
      repFlgPck_[repFlgPckCount_--] = Flags.VAL0;
    }
  }
  public void clearRepFlgPck() {
    assertNotReadOnly();
    while (repFlgPckCount_ > 0) {
      repFlgPck_[repFlgPckCount_--] = Flags.VAL0;
    }
  }
  private int repFlgPckMemoizedSerializedSize;
  
  private void initFields() {
    reqFlg_ = Flags.VAL0;
    optFlg_ = Flags.VAL0;
    reqFoo_ = Foo.getDefaultInstance();
    optFoo_ = Foo.getDefaultInstance();
    reqFlgDef_ = Flags.VAL0;
    optFlgDef_ = Flags.VAL1;
  }
  public final boolean isInitialized() {
    if (!hasReqInt()) return false;
    if (!hasReqStr()) return false;
    if (!hasReqBts()) return false;
    if (!hasReqFlg()) return false;
    if (!hasReqFoo()) return false;
    if (!hasReqBool()) return false;
    if (!hasReqIntDef()) return false;
    if (!hasReqFlgDef()) return false;
    if (!hasReqStrDef()) return false;
    if (!hasReqBoolDef()) return false;
    if (!getReqFoo().isInitialized()) return false;
    if (hasOptFoo()) {
      if (!getOptFoo().isInitialized()) return false;
    }
    for (int i = 0; i < getRepFooCount(); i++) {
      Foo element = getRepFoo(i);
      if (!element.isInitialized()) return false;
    }
    return true;
  }
  
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (!(obj instanceof HelloWorldProto)) return false;
    HelloWorldProto msg = (HelloWorldProto)obj;
    if (reqInt_ != msg.reqInt_) {
      return false;
    }
    if (optInt_ != msg.optInt_) {
      return false;
    }
    if (repInt_.length != msg.repInt_.length) return false;
    for (int j = 0; j < repInt_.length; j++) {
      if (repInt_[j] != msg.repInt_[j]) {
        return false;
      }
    }
    if (!reqStr_.equals(msg.reqStr_)) {
      return false;
    }
    if (!optStr_.equals(msg.optStr_)) {
      return false;
    }
    if (repStr_.length != msg.repStr_.length) return false;
    for (int j = 0; j < repStr_.length; j++) {
      if (!repStr_[j].equals(msg.repStr_[j])) {
        return false;
      }
    }
    if (!reqBts_.equals(msg.reqBts_)) {
      return false;
    }
    if (!optBts_.equals(msg.optBts_)) {
      return false;
    }
    if (repBts_.length != msg.repBts_.length) return false;
    for (int j = 0; j < repBts_.length; j++) {
      if (!repBts_[j].equals(msg.repBts_[j])) {
        return false;
      }
    }
    if (reqFlg_ != msg.reqFlg_) {
      return false;
    }
    if (optFlg_ != msg.optFlg_) {
      return false;
    }
    if (repFlg_.length != msg.repFlg_.length) return false;
    for (int j = 0; j < repFlg_.length; j++) {
      if (repFlg_[j] != msg.repFlg_[j]) {
        return false;
      }
    }
    if (!reqFoo_.equals(msg.reqFoo_)) {
      return false;
    }
    if (!optFoo_.equals(msg.optFoo_)) {
      return false;
    }
    if (repFoo_.size() != msg.repFoo_.size()) return false;
    for (int j = 0; j < repFoo_.size(); j++) {
      if (!repFoo_.elementAt(j).equals(msg.repFoo_.elementAt(j))) {
        return false;
      }
    }
    if (reqBool_ != msg.reqBool_) {
      return false;
    }
    if (optBool_ != msg.optBool_) {
      return false;
    }
    if (repBool_.length != msg.repBool_.length) return false;
    for (int j = 0; j < repBool_.length; j++) {
      if (repBool_[j] != msg.repBool_[j]) {
        return false;
      }
    }
    if (reqIntDef_ != msg.reqIntDef_) {
      return false;
    }
    if (optIntDef_ != msg.optIntDef_) {
      return false;
    }
    if (reqFlgDef_ != msg.reqFlgDef_) {
      return false;
    }
    if (optFlgDef_ != msg.optFlgDef_) {
      return false;
    }
    if (!reqStrDef_.equals(msg.reqStrDef_)) {
      return false;
    }
    if (!optStrDef_.equals(msg.optStrDef_)) {
      return false;
    }
    if (reqBoolDef_ != msg.reqBoolDef_) {
      return false;
    }
    if (optBoolDef_ != msg.optBoolDef_) {
      return false;
    }
    if (repIntPck_.length != msg.repIntPck_.length) return false;
    for (int j = 0; j < repIntPck_.length; j++) {
      if (repIntPck_[j] != msg.repIntPck_[j]) {
        return false;
      }
    }
    if (repBoolPck_.length != msg.repBoolPck_.length) return false;
    for (int j = 0; j < repBoolPck_.length; j++) {
      if (repBoolPck_[j] != msg.repBoolPck_[j]) {
        return false;
      }
    }
    if (repFlgPck_.length != msg.repFlgPck_.length) return false;
    for (int j = 0; j < repFlgPck_.length; j++) {
      if (repFlgPck_[j] != msg.repFlgPck_[j]) {
        return false;
      }
    }
    return true;
  }
  
  public int hashCode() {
    int hash = 41 * getClass().getName().hashCode();
    if (hasReqInt()) hash += 33 * reqInt_;
    if (hasOptInt()) hash += 33 * optInt_;
    for (int j = 0; j < repInt_.length; j++) {
      hash += 19 * repInt_[j];
    }
    if (hasReqStr()) hash += 31 * reqStr_.hashCode();
    if (hasOptStr()) hash += 31 * optStr_.hashCode();
    for (int j = 0; j < repStr_.length; j++) {
      hash += 19 * repStr_[j].hashCode();
    }
    if (hasReqBts()) hash += 31 * reqBts_.hashCode();
    if (hasOptBts()) hash += 31 * optBts_.hashCode();
    for (int j = 0; j < repBts_.length; j++) {
      hash += 19 * repBts_[j].hashCode();
    }
    if (hasReqFlg())  hash += 37 * reqFlg_.hashCode();
    if (hasOptFlg())  hash += 37 * optFlg_.hashCode();
    for (int j = 0; j < repFlg_.length; j++) {
      hash += 13 * repFlg_[j].getValue();
    }
    if (hasReqFoo())   hash += 31 * reqFoo_.hashCode();
    if (hasOptFoo())   hash += 31 * optFoo_.hashCode();
    for (int j = 0; j < repFoo_.size(); j++) {
      hash += 17 * repFoo_.elementAt(j).hashCode();
    }
    if (hasReqBool()) hash += 33 * (reqBool_ ? 1 : 0);
    if (hasOptBool()) hash += 33 * (optBool_ ? 1 : 0);
    for (int j = 0; j < repBool_.length; j++) {
      hash += repBool_[j] ? 19 : 17;
    }
    if (hasReqIntDef()) hash += 33 * reqIntDef_;
    if (hasOptIntDef()) hash += 33 * optIntDef_;
    if (hasReqFlgDef())  hash += 37 * reqFlgDef_.hashCode();
    if (hasOptFlgDef())  hash += 37 * optFlgDef_.hashCode();
    if (hasReqStrDef()) hash += 31 * reqStrDef_.hashCode();
    if (hasOptStrDef()) hash += 31 * optStrDef_.hashCode();
    if (hasReqBoolDef()) hash += 33 * (reqBoolDef_ ? 1 : 0);
    if (hasOptBoolDef()) hash += 33 * (optBoolDef_ ? 1 : 0);
    for (int j = 0; j < repIntPck_.length; j++) {
      hash += 19 * repIntPck_[j];
    }
    for (int j = 0; j < repBoolPck_.length; j++) {
      hash += repBoolPck_[j] ? 19 : 17;
    }
    for (int j = 0; j < repFlgPck_.length; j++) {
      hash += 13 * repFlgPck_[j].getValue();
    }
    return hash;
  }
  
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (hasReqInt()) {
      output.writeInt32(1, getReqInt());
    }
    if (hasOptInt()) {
      output.writeInt32(2, getOptInt());
    }
    for (int i = 0; i < getRepIntCount(); i++) {
      int element = getRepInt(i);
      output.writeInt32(3, element);
    }
    if (hasReqStr()) {
      output.writeString(4, getReqStr());
    }
    if (hasOptStr()) {
      output.writeString(5, getOptStr());
    }
    for (int i = 0; i < getRepStrCount(); i++) {
      java.lang.String element = getRepStr(i);
      output.writeString(6, element);
    }
    if (hasReqBts()) {
      output.writeBytes(7, getReqBts());
    }
    if (hasOptBts()) {
      output.writeBytes(8, getOptBts());
    }
    for (int i = 0; i < getRepBtsCount(); i++) {
      com.google.protobuf.ByteString element = getRepBts(i);
      output.writeBytes(9, element);
    }
    if (hasReqFlg()) {
      output.writeEnum(10, getReqFlg().getValue());
    }
    if (hasOptFlg()) {
      output.writeEnum(11, getOptFlg().getValue());
    }
    for (int i = 0; i < getRepFlgCount(); i++) {
      Flags element = getRepFlg(i);
      output.writeEnum(12, element.getValue());
    }
    if (hasReqFoo()) {
      output.writeMessage(13, getReqFoo());
    }
    if (hasOptFoo()) {
      output.writeMessage(14, getOptFoo());
    }
    for (int i = 0; i < getRepFooCount(); i++) {
      Foo element = getRepFoo(i);
      output.writeMessage(15, element);
    }
    if (hasReqBool()) {
      output.writeBool(16, getReqBool());
    }
    if (hasOptBool()) {
      output.writeBool(17, getOptBool());
    }
    for (int i = 0; i < getRepBoolCount(); i++) {
      boolean element = getRepBool(i);
      output.writeBool(18, element);
    }
    if (hasReqIntDef()) {
      output.writeInt32(19, getReqIntDef());
    }
    if (hasOptIntDef()) {
      output.writeInt32(20, getOptIntDef());
    }
    if (hasReqFlgDef()) {
      output.writeEnum(21, getReqFlgDef().getValue());
    }
    if (hasOptFlgDef()) {
      output.writeEnum(22, getOptFlgDef().getValue());
    }
    if (hasReqStrDef()) {
      output.writeString(23, getReqStrDef());
    }
    if (hasOptStrDef()) {
      output.writeString(24, getOptStrDef());
    }
    if (hasReqBoolDef()) {
      output.writeBool(25, getReqBoolDef());
    }
    if (hasOptBoolDef()) {
      output.writeBool(26, getOptBoolDef());
    }
    if (getRepIntPckCount() > 0) {
      output.writeRawVarint32(218);
      output.writeRawVarint32(repIntPckMemoizedSerializedSize);
    }
    for (int i = 0; i < getRepIntPckCount(); i++) {
      int element = getRepIntPck(i);
      output.writeInt32NoTag(element);
    }
    if (getRepBoolPckCount() > 0) {
      output.writeRawVarint32(226);
      output.writeRawVarint32(repBoolPckMemoizedSerializedSize);
    }
    for (int i = 0; i < getRepBoolPckCount(); i++) {
      boolean element = getRepBoolPck(i);
      output.writeBoolNoTag(element);
    }
    if (getRepFlgPckCount() > 0) {
      output.writeRawVarint32(234);
      output.writeRawVarint32(repFlgPckMemoizedSerializedSize);
    }
    for (int i = 0; i < getRepFlgPckCount(); i++) {
      Flags element = getRepFlgPck(i);
      output.writeEnumNoTag(element.getValue());
    }
  }
  
  public int getSerializedSize() {
    int size = 0;
    if (hasReqInt()) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, getReqInt());
    }
    if (hasOptInt()) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, getOptInt());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < getRepIntCount(); i++) {
        int element = getRepInt(i);
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * getRepIntCount();
    }
    if (hasReqStr()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(4, getReqStr());
    }
    if (hasOptStr()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(5, getOptStr());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < getRepStrCount(); i++) {
        java.lang.String element = getRepStr(i);
        dataSize += com.google.protobuf.CodedOutputStream
          .computeStringSizeNoTag(element);
      }
      size += dataSize;
      size += 1 * getRepStrCount();
    }
    if (hasReqBts()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(7, getReqBts());
    }
    if (hasOptBts()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(8, getOptBts());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < getRepBtsCount(); i++) {
        com.google.protobuf.ByteString element = getRepBts(i);
        dataSize += com.google.protobuf.CodedOutputStream
          .computeBytesSizeNoTag(element);
      }
      size += dataSize;
      size += 1 * getRepBtsCount();
    }
    if (hasReqFlg()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(10, getReqFlg().getValue());
    }
    if (hasOptFlg()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(11, getOptFlg().getValue());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < getRepFlgCount(); i++) {
        Flags element = getRepFlg(i);
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(element.getValue());
      }
      size += dataSize;
      size += 1 * getRepFlgCount();
    }
    if (hasReqFoo()) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, getReqFoo());
    }
    if (hasOptFoo()) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, getOptFoo());
    }
    for (int i = 0; i < getRepFooCount(); i++) {
      Foo element = getRepFoo(i);
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, element);
    }
    if (hasReqBool()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(16, getReqBool());
    }
    if (hasOptBool()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(17, getOptBool());
    }
    {
      int dataSize = 0;
      dataSize = 1 * getRepBoolCount();
      size += dataSize;
      size += 2 * getRepBoolCount();
    }
    if (hasReqIntDef()) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(19, getReqIntDef());
    }
    if (hasOptIntDef()) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(20, getOptIntDef());
    }
    if (hasReqFlgDef()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(21, getReqFlgDef().getValue());
    }
    if (hasOptFlgDef()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(22, getOptFlgDef().getValue());
    }
    if (hasReqStrDef()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(23, getReqStrDef());
    }
    if (hasOptStrDef()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(24, getOptStrDef());
    }
    if (hasReqBoolDef()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(25, getReqBoolDef());
    }
    if (hasOptBoolDef()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(26, getOptBoolDef());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < getRepIntPckCount(); i++) {
        int element = getRepIntPck(i);
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(element);
      }
      size += dataSize;
      if (getRepIntPckCount() > 0) {
        size += 2;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      repIntPckMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      dataSize = 1 * getRepBoolPckCount();
      size += dataSize;
      if (getRepBoolPckCount() > 0) {
        size += 2;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      repBoolPckMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < getRepFlgPckCount(); i++) {
        Flags element = getRepFlgPck(i);
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(element.getValue());
      }
      size += dataSize;
      if (getRepFlgPckCount() > 0) {
        size += 2;
        size += com.google.protobuf.CodedOutputStream
          .computeRawVarint32Size(dataSize);
      }
      repFlgPckMemoizedSerializedSize = dataSize;
    }
    return size;
  }
  
  public static HelloWorldProto parseFrom(
      java.io.InputStream input)
      throws java.io.IOException {
    com.google.protobuf.CodedInputStream codedInput =
        com.google.protobuf.CodedInputStream.newInstance(input);
    return parseFrom(codedInput);
  }
  
  public static HelloWorldProto parseFrom(
      com.google.protobuf.CodedInputStream codedInput)
      throws java.io.IOException {
    HelloWorldProto proto = new HelloWorldProto();
    proto.mergeFrom(codedInput);
    return proto;
  }
  
  public com.google.protobuf.Message newInstance() {
    return new HelloWorldProto();
  }
  
  public void mergeFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    assertNotReadOnly();
    while (true) {
      int tag = input.readTag();
      switch (tag) {
        case 0:
          return;
        default: {
          if (!parseUnknownField(input, tag)) {
            return;
          }
          break;
        }
        case 8: {
          setReqInt(input.readInt32());
          break;
        }
        case 16: {
          setOptInt(input.readInt32());
          break;
        }
        case 24: {
          addRepInt(input.readInt32());
          break;
        }
        case 26: {
          int length = input.readRawVarint32();
          reserveRepInt(length);
          int limit = input.pushLimit(length);
          while (input.getBytesUntilLimit() > 0) {
            addRepInt(input.readInt32());
          }
          input.popLimit(limit);
          break;
        }
        case 34: {
          setReqStr(input.readString());
          break;
        }
        case 42: {
          setOptStr(input.readString());
          break;
        }
        case 50: {
          addRepStr(input.readString());
          break;
        }
        case 58: {
          setReqBts(input.readBytes());
          break;
        }
        case 66: {
          setOptBts(input.readBytes());
          break;
        }
        case 74: {
          addRepBts(input.readBytes());
          break;
        }
        case 80: {
          int rawValue = input.readEnum();
          Flags value = Flags.valueOf(rawValue);
          if (value != null) {
            setReqFlg(value);
          }
          break;
        }
        case 88: {
          int rawValue = input.readEnum();
          Flags value = Flags.valueOf(rawValue);
          if (value != null) {
            setOptFlg(value);
          }
          break;
        }
        case 96: {
          int rawValue = input.readEnum();
          Flags value = Flags.valueOf(rawValue);
          if (value != null) {
            addRepFlg(value);
          }
          break;
        }
        case 98: {
          int length = input.readRawVarint32();
          int oldLimit = input.pushLimit(length);
          while(input.getBytesUntilLimit() > 0) {
            int rawValue = input.readEnum();
            Flags value = Flags.valueOf(rawValue);
            if (value != null) {
              addRepFlg(value);
            }
          }
          input.popLimit(oldLimit);
          break;
        }
        case 106: {
          if (!hasReqFoo()) {
            setReqFoo(new Foo());
          }
          input.readMessage(getReqFoo());
          break;
        }
        case 114: {
          if (!hasOptFoo()) {
            setOptFoo(new Foo());
          }
          input.readMessage(getOptFoo());
          break;
        }
        case 122: {
          Foo msg = new Foo();
          input.readMessage(msg);
          addRepFoo(msg);
          break;
        }
        case 128: {
          setReqBool(input.readBool());
          break;
        }
        case 136: {
          setOptBool(input.readBool());
          break;
        }
        case 144: {
          addRepBool(input.readBool());
          break;
        }
        case 146: {
          int length = input.readRawVarint32();
          reserveRepBool(length);
          int limit = input.pushLimit(length);
          while (input.getBytesUntilLimit() > 0) {
            addRepBool(input.readBool());
          }
          input.popLimit(limit);
          break;
        }
        case 152: {
          setReqIntDef(input.readInt32());
          break;
        }
        case 160: {
          setOptIntDef(input.readInt32());
          break;
        }
        case 168: {
          int rawValue = input.readEnum();
          Flags value = Flags.valueOf(rawValue);
          if (value != null) {
            setReqFlgDef(value);
          }
          break;
        }
        case 176: {
          int rawValue = input.readEnum();
          Flags value = Flags.valueOf(rawValue);
          if (value != null) {
            setOptFlgDef(value);
          }
          break;
        }
        case 186: {
          setReqStrDef(input.readString());
          break;
        }
        case 194: {
          setOptStrDef(input.readString());
          break;
        }
        case 200: {
          setReqBoolDef(input.readBool());
          break;
        }
        case 208: {
          setOptBoolDef(input.readBool());
          break;
        }
        case 216: {
          addRepIntPck(input.readInt32());
          break;
        }
        case 218: {
          int length = input.readRawVarint32();
          reserveRepIntPck(length);
          int limit = input.pushLimit(length);
          while (input.getBytesUntilLimit() > 0) {
            addRepIntPck(input.readInt32());
          }
          input.popLimit(limit);
          break;
        }
        case 224: {
          addRepBoolPck(input.readBool());
          break;
        }
        case 226: {
          int length = input.readRawVarint32();
          reserveRepBoolPck(length);
          int limit = input.pushLimit(length);
          while (input.getBytesUntilLimit() > 0) {
            addRepBoolPck(input.readBool());
          }
          input.popLimit(limit);
          break;
        }
        case 232: {
          int rawValue = input.readEnum();
          Flags value = Flags.valueOf(rawValue);
          if (value != null) {
            addRepFlgPck(value);
          }
          break;
        }
        case 234: {
          int length = input.readRawVarint32();
          int oldLimit = input.pushLimit(length);
          while(input.getBytesUntilLimit() > 0) {
            int rawValue = input.readEnum();
            Flags value = Flags.valueOf(rawValue);
            if (value != null) {
              addRepFlgPck(value);
            }
          }
          input.popLimit(oldLimit);
          break;
        }
      }
    }
  }
  
  
  static {
    defaultInstance = new HelloWorldProto(true);
    HelloWorld.internalForceInit();
    defaultInstance.initFields();
  }
  
  // @@protoc_insertion_point(class_scope:HelloWorldProto)
}

