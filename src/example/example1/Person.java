// Generated by the protocol buffer compiler.  DO NOT EDIT!

public  final class Person extends
    com.google.protobuf.Message {
  private int set_mask_0_;
  public Person() {
    super("Person");
    initFields();
  }
  private Person(boolean noInit) { super(true); }
  
  private static final Person defaultInstance;
  public static Person getDefaultInstance() {
    return defaultInstance;
  }
  
  public Person getDefaultInstanceForType() {
    return defaultInstance;
  }
  
  public static final class PhoneType
      extends com.google.protobuf.EnumType {
    public static final int MOBILE_VALUE = 0;
    public static final PhoneType MOBILE = 
        new PhoneType(MOBILE_VALUE, "MOBILE");
    public static final int HOME_VALUE = 1;
    public static final PhoneType HOME = 
        new PhoneType(HOME_VALUE, "HOME");
    public static final int WORK_VALUE = 2;
    public static final PhoneType WORK = 
        new PhoneType(WORK_VALUE, "WORK");
    public static PhoneType valueOf(int value) {
      switch (value) {
        case MOBILE_VALUE: return MOBILE;
        case HOME_VALUE: return HOME;
        case WORK_VALUE: return WORK;
        default: throw new IllegalArgumentException(Integer.toString(value));
      }
    }
    
    private static PhoneType[] _VALUES = new PhoneType[] {
      MOBILE,
      HOME,
      WORK,
    };
    public static PhoneType[] values() {
      return _VALUES;
    }
    
    private PhoneType(int value, String name) {
      super(value, name);
    }
    
    public com.google.protobuf.EnumType getEnum(int value) {
      return PhoneType.valueOf(value);
    }
    
    // @@protoc_insertion_point(enum_scope:Person.PhoneType)
  }
  
  public  static final class PhoneNumber extends
      com.google.protobuf.Message {
    private int set_mask_0_;
    public PhoneNumber() {
      super("Person.PhoneNumber");
      initFields();
    }
    private PhoneNumber(boolean noInit) { super(true); }
    
    private static final PhoneNumber defaultInstance;
    public static PhoneNumber getDefaultInstance() {
      return defaultInstance;
    }
    
    public PhoneNumber getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    // required string number = 1;
    private java.lang.String number_ = "";
    public java.lang.String getNumber() { return number_; }
    public boolean hasNumber() { return (set_mask_0_ & 1) != 0; }
    public void clearNumber() {
      assertNotReadOnly();
      set_mask_0_ &= ~1;
      number_ = "";
    }
    public void setNumber(java.lang.String value) {
      assertNotReadOnly();
      set_mask_0_ |= 1;
      number_ = value;
    }
    
    // optional .Person.PhoneType type = 2 [default = HOME];
    private Person.PhoneType type_;
    public Person.PhoneType getType() { return type_; }
    public boolean hasType() { return (set_mask_0_ & 2) != 0; }
    public void clearType() {
      assertNotReadOnly();
      set_mask_0_ &= ~2;
      type_ = Person.PhoneType.HOME;
    }
    public void setType(Person.PhoneType value) {
      assertNotReadOnly();
      if (value == null) {
        throw new NullPointerException();
      }
      set_mask_0_ |= 2;
      type_ = value;
    }
    
    private void initFields() {
      type_ = Person.PhoneType.HOME;
    }
    public final boolean isInitialized() {
      if (!hasNumber) return false;
      return true;
    }
    
    public boolean equals(Object obj) {
      if (this == obj) return true;
      if (!(obj instanceof Person.PhoneNumber)) return false;
      Person.PhoneNumber msg = (Person.PhoneNumber)obj;
      if (!number_.equals(msg.number_)) {
        return false;
      }
      if (type_ != msg.type_) {
        return false;
      }
      return true;
    }
    
    public int hashCode() {
      int hash = 41 * getClass().getName().hashCode();
      if (hasNumber()) hash += 31 * number_.hashCode();
      if (hasType())  hash += 37 * type_.hashCode();
      return hash;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hasNumber()) {
        output.writeString(1, getNumber());
      }
      if (hasType()) {
        output.writeEnum(2, getType().getValue());
      }
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getNumber());
      }
      if (hasType()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, getType().getValue());
      }
      return size;
    }
    
    public static Person.PhoneNumber parseFrom(
        java.io.InputStream input)
        throws java.io.IOException {
      com.google.protobuf.CodedInputStream codedInput =
          com.google.protobuf.CodedInputStream.newInstance(input);
      return parseFrom(codedInput);
    }
    
    public static Person.PhoneNumber parseFrom(
        com.google.protobuf.CodedInputStream codedInput)
        throws java.io.IOException {
      Person.PhoneNumber proto = new Person.PhoneNumber();
      proto.mergeFrom(codedInput);
      return proto;
    }
    
    public com.google.protobuf.Message newInstance() {
      return new Person.PhoneNumber();
    }
    
    public void mergeFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      assertNotReadOnly();
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return;
          default: {
            if (!parseUnknownField(input, tag)) {
              return;
            }
            break;
          }
          case 10: {
            setNumber(input.readString());
            break;
          }
          case 16: {
            int rawValue = input.readEnum();
            Person.PhoneType value = Person.PhoneType.valueOf(rawValue);
            if (value != null) {
              setType(value);
            }
            break;
          }
        }
      }
    }
    
    
    static {
      defaultInstance = new PhoneNumber(true);
      Example1.internalForceInit();
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:Person.PhoneNumber)
  }
  
  // required string name = 1;
  private java.lang.String name_ = "";
  public java.lang.String getName() { return name_; }
  public boolean hasName() { return (set_mask_0_ & 1) != 0; }
  public void clearName() {
    assertNotReadOnly();
    set_mask_0_ &= ~1;
    name_ = "";
  }
  public void setName(java.lang.String value) {
    assertNotReadOnly();
    set_mask_0_ |= 1;
    name_ = value;
  }
  
  // required int32 id = 2;
  private int id_ = 0;
  public int getId() { return id_; }
  public boolean hasId() { return (set_mask_0_ & 2) != 0; }
  public void clearId() {
    assertNotReadOnly();
    set_mask_0_ &= ~2;
    id_ = 0;
  }
  public void setId(int value) {
    assertNotReadOnly();
    set_mask_0_ |= 2;
    id_ = value;
  }
  
  // optional string email = 3;
  private java.lang.String email_ = "";
  public java.lang.String getEmail() { return email_; }
  public boolean hasEmail() { return (set_mask_0_ & 4) != 0; }
  public void clearEmail() {
    assertNotReadOnly();
    set_mask_0_ &= ~4;
    email_ = "";
  }
  public void setEmail(java.lang.String value) {
    assertNotReadOnly();
    set_mask_0_ |= 4;
    email_ = value;
  }
  
  // required .Person.PhoneNumber reqphone = 4;
  private Person.PhoneNumber reqphone_;
  public Person.PhoneNumber getReqphone() { return reqphone_; }
  public boolean hasReqphone() { return (set_mask_0_ & 8) != 0; }
  public void clearReqphone() {
    assertNotReadOnly();
    set_mask_0_ &= ~8;
    reqphone_ = Person.PhoneNumber.getDefaultInstance();
  }
  public void setReqphone(Person.PhoneNumber value) {
    assertNotReadOnly();
    if (value == null) {
      throw new NullPointerException();
    }
    set_mask_0_ |= 8;
    reqphone_ = value;
  }
  
  // optional .Person.PhoneNumber optphone = 5;
  private Person.PhoneNumber optphone_;
  public Person.PhoneNumber getOptphone() { return optphone_; }
  public boolean hasOptphone() { return (set_mask_0_ & 16) != 0; }
  public void clearOptphone() {
    assertNotReadOnly();
    set_mask_0_ &= ~16;
    optphone_ = Person.PhoneNumber.getDefaultInstance();
  }
  public void setOptphone(Person.PhoneNumber value) {
    assertNotReadOnly();
    if (value == null) {
      throw new NullPointerException();
    }
    set_mask_0_ |= 16;
    optphone_ = value;
  }
  
  // repeated .Person.PhoneNumber repphone = 6;
  private java.util.Vector repphone_ = new java.util.Vector();
  public java.util.Enumeration getRepphoneEnum() {
    return repphone_.elements();
  }
  public int getRepphoneCount() { return repphone_.size(); }
  public Person.PhoneNumber getRepphone(int index) {
    return (Person.PhoneNumber) repphone_.elementAt(index);
  }
  public void setRepphone(int index, Person.PhoneNumber value) {
    assertNotReadOnly();
    if (value == null) {
      throw new NullPointerException();
    }
    repphone_.setElementAt(value, index);
  }
  public void addRepphone(Person.PhoneNumber value) {
    assertNotReadOnly();
    if (value == null) {
      throw new NullPointerException();
    }
    repphone_.addElement(value);
  }
  public void swapRepphone(int index1, int index2) {
    assertNotReadOnly();
    Object swp = repphone_.elementAt(index1);
    repphone_.setElementAt(repphone_.elementAt(index2), index1);
    repphone_.setElementAt(swp, index2);
  }
  public void removeLastRepphone() {
    assertNotReadOnly();
    if (repphone_.size() > 0) {
      repphone_.removeElementAt(repphone_.size() - 1);
    }
  }
  public void clearRepphone() {
    assertNotReadOnly();
    repphone_.removeAllElements();
  }
  
  // required .Person.PhoneType reqtype = 7;
  private Person.PhoneType reqtype_;
  public Person.PhoneType getReqtype() { return reqtype_; }
  public boolean hasReqtype() { return (set_mask_0_ & 64) != 0; }
  public void clearReqtype() {
    assertNotReadOnly();
    set_mask_0_ &= ~64;
    reqtype_ = Person.PhoneType.MOBILE;
  }
  public void setReqtype(Person.PhoneType value) {
    assertNotReadOnly();
    if (value == null) {
      throw new NullPointerException();
    }
    set_mask_0_ |= 64;
    reqtype_ = value;
  }
  
  // optional .Person.PhoneType opttype = 8;
  private Person.PhoneType opttype_;
  public Person.PhoneType getOpttype() { return opttype_; }
  public boolean hasOpttype() { return (set_mask_0_ & 128) != 0; }
  public void clearOpttype() {
    assertNotReadOnly();
    set_mask_0_ &= ~128;
    opttype_ = Person.PhoneType.MOBILE;
  }
  public void setOpttype(Person.PhoneType value) {
    assertNotReadOnly();
    if (value == null) {
      throw new NullPointerException();
    }
    set_mask_0_ |= 128;
    opttype_ = value;
  }
  
  // repeated .Person.PhoneType reptype = 9;
  private Person.PhoneType[] reptype_ = new Person.PhoneType[0];
  private int reptypeCount_;
  public int getReptypeCount() { return reptypeCount_; }
  public Person.PhoneType getReptype(int index) {
    return reptype_[index];
  }
  public void reserveReptype(int size) {
    if (size >= reptype_.length) {
      Person.PhoneType[] copy = new Person.PhoneType[size];
      System.arraycopy(reptype_, 0, copy, 0, reptypeCount_);
      reptype_ = copy;
    }
  }
  public void setReptype(int index, Person.PhoneType value) {
    assertNotReadOnly();
    reptype_[index] = value;
  }
  public void addReptype(Person.PhoneType value) {
    assertNotReadOnly();
    reserveReptype(reptypeCount_ + 1);
    reptype_[reptypeCount_++] = value;
  }
  public void swapReptype(int index1, int index2) {
    assertNotReadOnly();
    Person.PhoneType swp = reptype_[index1];
    reptype_[index1] = reptype_[index2];
    reptype_[index2] = swp;
  }
  public void removeLastReptype() {
    assertNotReadOnly();
    if (reptypeCount_ > 0) {
      reptype_[reptypeCount_--] = Person.PhoneType.MOBILE;
    }
  }
  public void clearReptype() {
    assertNotReadOnly();
    while (reptypeCount_ > 0) {
      reptype_[reptypeCount_--] = Person.PhoneType.MOBILE;
    }
  }
  
  private void initFields() {
    reqphone_ = Person.PhoneNumber.getDefaultInstance();
    optphone_ = Person.PhoneNumber.getDefaultInstance();
    reqtype_ = Person.PhoneType.MOBILE;
    opttype_ = Person.PhoneType.MOBILE;
  }
  public final boolean isInitialized() {
    if (!hasName) return false;
    if (!hasId) return false;
    if (!hasReqphone) return false;
    if (!hasReqtype) return false;
    if (!getReqphone().isInitialized()) return false;
    if (hasOptphone()) {
      if (!getOptphone().isInitialized()) return false;
    }
    for (int i = 0; i < getRepphoneCount(); i++) {
      Person.PhoneNumber element = getRepphone(i);
      if (!element.isInitialized()) return false;
    }
    return true;
  }
  
  public boolean equals(Object obj) {
    if (this == obj) return true;
    if (!(obj instanceof Person)) return false;
    Person msg = (Person)obj;
    if (!name_.equals(msg.name_)) {
      return false;
    }
    if (id_ != msg.id_) {
      return false;
    }
    if (!email_.equals(msg.email_)) {
      return false;
    }
    if (!reqphone_.equals(msg.reqphone_)) {
      return false;
    }
    if (!optphone_.equals(msg.optphone_)) {
      return false;
    }
    if (repphone_.size() != msg.repphone_.size()) return false;
    for (int j = 0; j < repphone_.size(); j++) {
      if (!repphone_.elementAt(j).equals(msg.repphone_.elementAt(j))) {
        return false;
      }
    }
    if (reqtype_ != msg.reqtype_) {
      return false;
    }
    if (opttype_ != msg.opttype_) {
      return false;
    }
    if (reptype_.length != msg.reptype_.length) return false;
    for (int j = 0; j < reptype_.length; j++) {
      if (reptype_[j] != msg.reptype_[j]) {
        return false;
      }
    }
    return true;
  }
  
  public int hashCode() {
    int hash = 41 * getClass().getName().hashCode();
    if (hasName()) hash += 31 * name_.hashCode();
    if (hasId()) hash += 33 * id_;
    if (hasEmail()) hash += 31 * email_.hashCode();
    if (hasReqphone())   hash += 31 * reqphone_.hashCode();
    if (hasOptphone())   hash += 31 * optphone_.hashCode();
    for (int j = 0; j < repphone_.size(); j++) {
      hash += 17 * repphone_.elementAt(j).hashCode();
    }
    if (hasReqtype())  hash += 37 * reqtype_.hashCode();
    if (hasOpttype())  hash += 37 * opttype_.hashCode();
    for (int j = 0; j < reptype_.length; j++) {
      hash += 13 * reptype_[j].getValue();
    }
    return hash;
  }
  
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (hasName()) {
      output.writeString(1, getName());
    }
    if (hasId()) {
      output.writeInt32(2, getId());
    }
    if (hasEmail()) {
      output.writeString(3, getEmail());
    }
    if (hasReqphone()) {
      output.writeMessage(4, getReqphone());
    }
    if (hasOptphone()) {
      output.writeMessage(5, getOptphone());
    }
    for (int i = 0; i < getRepphoneCount(); i++) {
      Person.PhoneNumber element = getRepphone(i);
      output.writeMessage(6, element);
    }
    if (hasReqtype()) {
      output.writeEnum(7, getReqtype().getValue());
    }
    if (hasOpttype()) {
      output.writeEnum(8, getOpttype().getValue());
    }
    for (int i = 0; i < getReptypeCount(); i++) {
      Person.PhoneType element = getReptype(i);
      output.writeEnum(9, element.getValue());
    }
  }
  
  public int getSerializedSize() {
    int size = 0;
    if (hasName()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getName());
    }
    if (hasId()) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, getId());
    }
    if (hasEmail()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(3, getEmail());
    }
    if (hasReqphone()) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getReqphone());
    }
    if (hasOptphone()) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getOptphone());
    }
    for (int i = 0; i < getRepphoneCount(); i++) {
      Person.PhoneNumber element = getRepphone(i);
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, element);
    }
    if (hasReqtype()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(7, getReqtype().getValue());
    }
    if (hasOpttype()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(8, getOpttype().getValue());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < getReptypeCount(); i++) {
        Person.PhoneType element = getReptype(i);
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(element.getValue());
      }
      size += dataSize;
      size += 1 * getReptypeCount();
    }
    return size;
  }
  
  public static Person parseFrom(
      java.io.InputStream input)
      throws java.io.IOException {
    com.google.protobuf.CodedInputStream codedInput =
        com.google.protobuf.CodedInputStream.newInstance(input);
    return parseFrom(codedInput);
  }
  
  public static Person parseFrom(
      com.google.protobuf.CodedInputStream codedInput)
      throws java.io.IOException {
    Person proto = new Person();
    proto.mergeFrom(codedInput);
    return proto;
  }
  
  public com.google.protobuf.Message newInstance() {
    return new Person();
  }
  
  public void mergeFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    assertNotReadOnly();
    while (true) {
      int tag = input.readTag();
      switch (tag) {
        case 0:
          return;
        default: {
          if (!parseUnknownField(input, tag)) {
            return;
          }
          break;
        }
        case 10: {
          setName(input.readString());
          break;
        }
        case 16: {
          setId(input.readInt32());
          break;
        }
        case 26: {
          setEmail(input.readString());
          break;
        }
        case 34: {
          if (!hasReqphone()) {
            setReqphone(new Person.PhoneNumber());
          }
          input.readMessage(getReqphone());
          break;
        }
        case 42: {
          if (!hasOptphone()) {
            setOptphone(new Person.PhoneNumber());
          }
          input.readMessage(getOptphone());
          break;
        }
        case 50: {
          Person.PhoneNumber msg = new Person.PhoneNumber();
          input.readMessage(msg);
          addRepphone(msg);
          break;
        }
        case 56: {
          int rawValue = input.readEnum();
          Person.PhoneType value = Person.PhoneType.valueOf(rawValue);
          if (value != null) {
            setReqtype(value);
          }
          break;
        }
        case 64: {
          int rawValue = input.readEnum();
          Person.PhoneType value = Person.PhoneType.valueOf(rawValue);
          if (value != null) {
            setOpttype(value);
          }
          break;
        }
        case 72: {
          int rawValue = input.readEnum();
          Person.PhoneType value = Person.PhoneType.valueOf(rawValue);
          if (value != null) {
            addReptype(value);
          }
          break;
        }
        case 74: {
          int length = input.readRawVarint32();
          int oldLimit = input.pushLimit(length);
          while(input.getBytesUntilLimit() > 0) {
            int rawValue = input.readEnum();
            Person.PhoneType value = Person.PhoneType.valueOf(rawValue);
            if (value != null) {
              addReptype(value);
            }
          }
          input.popLimit(oldLimit);
          break;
        }
      }
    }
  }
  
  
  static {
    defaultInstance = new Person(true);
    Example1.internalForceInit();
    defaultInstance.initFields();
  }
  
  // @@protoc_insertion_point(class_scope:Person)
}

